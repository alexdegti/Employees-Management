@page "/employees/edit"
@rendermode InteractiveServer
@using Gilsar.Models
@using Gilsar.Services
@inject EmployeeServices employeeServices
@inject NavigationManager navigationManager

@if(!(employee is null)){
	<div class="row">
		<div class="col-md-4">
			<div class="mb-3">
				<dl class="row">
					<dt class="col-sm-2"> id: </dt>
					<dd class="col-sm-10"> @id </dd>
				</dl>
			</div>
			<EditForm method="post" Model="employee" OnValidSubmit="EditEmployee" FormName="add" Enhance>
				<DataAnnotationsValidator />
				<div class="mb-3">
					<label for="name" class="form-label">name:</label>
					<InputText id="name" @bind-Value="employee.name" class="form-control" />
					<ValidationMessage For="() => employee.name" class="text-danger" />
				</div>
				<div class="form-group">
					<label for="title"> title: </label>
					<InputSelect @bind-Value="employee.title">
						@foreach (var title in Enum.GetValues(typeof(Employee.Title)))
						{
							<option value="@title">@title</option>
						}
					</InputSelect>
					<ValidationMessage For="() => employee.title" />
				</div>
				<div class="mb-3">
					<label for="salary" class="form-label">salary:</label>
					<InputNumber id="salary" @bind-Value="employee.salary" class="form-control" />
					<ValidationMessage For="() => employee.salary" class="text-danger" />
				</div>
				<div class="mb-3">
					<label for="profileImagePath" class="form-label">profile image path:</label>
					<InputText id="profileImagePath" @bind-Value="employee.profileImagePath" class="form-control" />
					<ValidationMessage For="() => employee.profileImagePath" class="text-danger" />
				</div>
				<button type="submit" class="btn btn-primary"> save changes </button>
				<a href="/employees"> Back </a>
			</EditForm>
		</div>
	</div>
}
else{
	<a href="/employees"> Back </a>
}

@code{

	[SupplyParameterFromQuery]
	private int id{get; set;}

	[SupplyParameterFromForm]
	private Employee? employee{get; set;}

	//Performs initialisation. Searches for a matching Employee
	//object in the employeesList property.
	protected override void OnInitialized() => employee = employeeServices.GetEmployees()
															.Find(matchingEmployee => matchingEmployee.id == id);

	//A callback that edits an employee.(In actuality the properties
	//are updated via the form)
	private void EditEmployee() => navigationManager.NavigateTo("/employees");
	
}
